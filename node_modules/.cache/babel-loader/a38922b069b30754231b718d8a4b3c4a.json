{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Caitlin\\\\Documents\\\\GitHub\\\\todoist-project\\\\src\\\\context\\\\selected-project-context.js\";\nimport React, { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nexport const SelectedProjectContext = createContext();\nexport const SelectedProjectProvider = ({\n  children\n}) => {\n  const [selectedProject, setSelectedProject] = useState('INBOX');\n  return /*#__PURE__*/React.createElement(SelectedProjectContext.Provider, {\n    value: {\n      selectedProject,\n      setSelectedProject\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);\nSelectedProjectProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["C:/Users/Caitlin/Documents/GitHub/todoist-project/src/context/selected-project-context.js"],"names":["React","createContext","useContext","useState","PropTypes","SelectedProjectContext","SelectedProjectProvider","children","selectedProject","setSelectedProject","useSelectedProjectValue","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,sBAAsB,GAAGJ,aAAa,EAA5C;AACP,OAAO,MAAMK,uBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,OAAD,CAAtD;AAEA,sBACE,oBAAC,sBAAD,CAAwB,QAAxB;AACE,IAAA,KAAK,EAAE;AAAEK,MAAAA,eAAF;AAAmBC,MAAAA;AAAnB,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGF,QAHH,CADF;AAOD,CAVM;AAYP,OAAO,MAAMG,uBAAuB,GAAG,MAAMR,UAAU,CAACG,sBAAD,CAAhD;AAEPC,uBAAuB,CAACK,SAAxB,GAAoC;AAClCJ,EAAAA,QAAQ,EAAEH,SAAS,CAACQ,IAAV,CAAeC;AADS,CAApC","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const SelectedProjectContext = createContext();\r\nexport const SelectedProjectProvider = ({ children }) => {\r\n  const [selectedProject, setSelectedProject] = useState('INBOX');\r\n\r\n  return (\r\n    <SelectedProjectContext.Provider\r\n      value={{ selectedProject, setSelectedProject }}\r\n    >\r\n      {children}\r\n    </SelectedProjectContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);\r\n\r\nSelectedProjectProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};"]},"metadata":{},"sourceType":"module"}