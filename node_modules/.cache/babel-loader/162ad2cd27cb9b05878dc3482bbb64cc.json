{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers'; // const collatedTasks = () => {};\n\nexport const useTasks = selectedProject => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n  useEffect(() => {\n    let unsubscribe = firebase.firestore.collection('tasks').where('userId', '==', '68bd4b0f');\n    unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ? unsubscribe = unsubscribe.where('projectId', '==', selectedProject) : selectedProject === 'TODAY' ? unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYY')) : selectedProject === 'INBOX' || selectedProject === 0 ? unsubscribe = unsubscribe.where('date', '==', '') : unsubscribe;\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      const newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data()\n      }));\n      setTasks(selectedProject === 'NEXT_7' ? newTasks.filter(task => moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 && task.archived !== true) : newTasks.filter(task => task.archived !== true));\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n    return () => unsubscribe();\n  }, [selectedProject]);\n  return {\n    tasks,\n    archivedTasks\n  };\n};\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    firebase.firestore().collection('projects').where('userId', '==', '68bd4b0f').orderBy('projectId').get().then(snapshot => {\n      const allProjects = snapshot.docs.map(project => ({ ...project.data(),\n        docId: project.id\n      }));\n\n      if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n        setProjects(allProjects);\n      }\n    });\n  }, [projects]);\n  return {\n    projects,\n    setProjects\n  };\n};","map":{"version":3,"sources":["C:/Users/Caitlin/Documents/GitHub/todoist-project/src/hooks/index.js"],"names":["useState","useEffect","moment","firebase","collatedTasksExist","useTasks","selectedProject","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","firestore","collection","where","format","onSnapshot","snapshot","newTasks","docs","map","task","id","data","filter","date","diff","archived","useProjects","projects","setProjects","orderBy","get","then","allProjects","project","docId","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport {firebase } from '../firebase';\r\nimport { collatedTasksExist } from '../helpers';\r\n\r\n\r\n// const collatedTasks = () => {};\r\n\r\nexport const useTasks = selectedProject => {\r\n    const[tasks, setTasks] = useState([]);\r\n    const[archivedTasks, setArchivedTasks] = useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n        let unsubscribe = firebase\r\n        .firestore\r\n        .collection('tasks')\r\n        .where('userId', '==', '68bd4b0f');\r\n\r\n        unsubscribe = selectedProject && !collatedTasksExist(selectedProject) \r\n        ? (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\r\n        : selectedProject === 'TODAY'\r\n        ? (unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYY')))\r\n        : selectedProject === 'INBOX' || selectedProject === 0\r\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\r\n        : unsubscribe;\r\n    \r\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\r\n        const newTasks = snapshot.docs.map(task => ({\r\n            id: task.id,\r\n            ...task.data(),\r\n        }));\r\n\r\n        setTasks(\r\n            selectedProject === 'NEXT_7'\r\n            ? newTasks.filter(\r\n                task => \r\n                    moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 && task.archived !== true\r\n            )\r\n            : newTasks.filter(task => task.archived !== true)\r\n        );\r\n        setArchivedTasks(newTasks.filter(task => task.archived !== false));\r\n    });\r\n    return () => unsubscribe();\r\n    }, [selectedProject]);\r\n    return { tasks, archivedTasks };\r\n};\r\n\r\nexport const useProjects = () => {\r\n    const [projects, setProjects] = useState([]);\r\n\r\n    useEffect(() => {\r\n        firebase.firestore()\r\n        .collection('projects')\r\n        .where('userId', '==', '68bd4b0f')\r\n        .orderBy('projectId')\r\n        .get()\r\n        .then(snapshot => {\r\n            const allProjects = snapshot.docs.map(project => ({\r\n                ...project.data(),\r\n                docId: project.id,\r\n            }));\r\n\r\n            if(JSON.stringify(allProjects) !== JSON.stringify(projects)) {\r\n                setProjects(allProjects);\r\n            }\r\n\r\n        });\r\n    }, [projects]);\r\n    return { projects, setProjects}; \r\n};"]},"metadata":{},"sourceType":"module"}