{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\nexport const useTasks = selectedProject => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n  useEffect(() => {\n    let unsubscribe = firebase.firestore().collection('tasks').where('userId', '==', '68bd4b0f');\n    unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ? unsubscribe = unsubscribe.where('projectId', '==', selectedProject) : selectedProject === 'TODAY' ? unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYYY')) : selectedProject === 'INBOX' || selectedProject === 0 ? unsubscribe = unsubscribe.where('date', '==', '') : unsubscribe;\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      const newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data()\n      }));\n      setTasks(selectedProject === 'NEXT_7' ? newTasks.filter(task => moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 && task.archived !== true) : newTasks.filter(task => task.archived !== true));\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n    return () => unsubscribe();\n  }, [selectedProject]);\n  return {\n    tasks,\n    archivedTasks\n  };\n};\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    firebase.firestore().collection('projects').where('userId', '==', 'jlIFXIwyAL3tzHMtzRbw').orderBy('projectId').get().then(snapshot => {\n      const allProjects = snapshot.docs.map(project => ({ ...project.data(),\n        docId: project.id\n      }));\n\n      if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n        setProjects(allProjects);\n      }\n    });\n  }, [projects]);\n  return {\n    projects,\n    setProjects\n  };\n};","map":{"version":3,"sources":["C:/Users/Caitlin/Documents/GitHub/todoist-project/src/hooks/index.js"],"names":["useState","useEffect","moment","firebase","collatedTasksExist","useTasks","selectedProject","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","firestore","collection","where","format","onSnapshot","snapshot","newTasks","docs","map","task","id","data","filter","date","diff","archived","useProjects","projects","setProjects","orderBy","get","then","allProjects","project","docId","JSON","stringify"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { firebase } from '../firebase';\r\nimport { collatedTasksExist } from '../helpers';\r\n\r\nexport const useTasks = selectedProject => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [archivedTasks, setArchivedTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let unsubscribe = firebase\r\n      .firestore()\r\n      .collection('tasks')\r\n      .where('userId', '==', '68bd4b0f');\r\n\r\n    unsubscribe =\r\n      selectedProject && !collatedTasksExist(selectedProject)\r\n        ? (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\r\n        : selectedProject === 'TODAY'\r\n        ? (unsubscribe = unsubscribe.where(\r\n            'date',\r\n            '==',\r\n            moment().format('DD/MM/YYYY')\r\n          ))\r\n        : selectedProject === 'INBOX' || selectedProject === 0\r\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\r\n        : unsubscribe;\r\n\r\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\r\n      const newTasks = snapshot.docs.map(task => ({\r\n        id: task.id,\r\n        ...task.data(),\r\n      }));\r\n\r\n      setTasks(\r\n        selectedProject === 'NEXT_7'\r\n          ? newTasks.filter(\r\n              task =>\r\n                moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 &&\r\n                task.archived !== true\r\n            )\r\n          : newTasks.filter(task => task.archived !== true)\r\n      );\r\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [selectedProject]);\r\n\r\n  return { tasks, archivedTasks };\r\n};\r\n\r\nexport const useProjects = () => {\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    firebase\r\n      .firestore()\r\n      .collection('projects')\r\n      .where('userId', '==', 'jlIFXIwyAL3tzHMtzRbw')\r\n      .orderBy('projectId')\r\n      .get()\r\n      .then(snapshot => {\r\n        const allProjects = snapshot.docs.map(project => ({\r\n          ...project.data(),\r\n          docId: project.id,\r\n        }));\r\n\r\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\r\n          setProjects(allProjects);\r\n        }\r\n      });\r\n  }, [projects]);\r\n\r\n  return { projects, setProjects };\r\n};"]},"metadata":{},"sourceType":"module"}